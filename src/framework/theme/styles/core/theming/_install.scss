@mixin dy-for-theme($name) {
  @if ($dy-theme-name == $name) {
    @content;
  }
}

@mixin dy-for-themes($names...) {
  @each $name in $names {
    @include dy-for-theme($name) {
      @content;
    }
  }
}

@mixin dy-except-theme($name) {
  @if ($dy-theme-name != $name) {
    @content;
  }
}

@mixin dy-except-for-themes($names...) {
  @each $name in $names {
    @include dy-except-theme($name) {
      @content;
    }
  }
}

@mixin dy-install-css-properties($theme-name, $theme) {
  .dy-theme-#{$theme-name} {
    @each $var, $value in $theme {
      @if (type-of($value) == "string" and map-get($theme, $value)) {
        --#{$var}: var(--#{$value});
      } @else {
        --#{$var}: #{$value};
      }
    }
  }
}

@mixin dy-pre-process-context($theme-name) {
  $dy-theme-process-mode: "pre-process" !global;

  $dy-theme-name: $theme-name !global;
  $dy-processed-theme: dy-process-theme(
    dy-get-registered-theme($theme-name)
  ) !global;
}

@mixin dy-lazy-process-context($theme-name) {
  $dy-theme-process-mode: "lazy-process" !global;

  $dy-theme-name: $theme-name !global;
  $dy-processed-theme: () !global;
}

@mixin dy-install-component-with-css-props() {
  // @breaking-change 5.0.0
  :host {
    @content;
  }
}

@mixin dy-install-component-with-scss-vars() {
  $enabled-themes: dy-get-enabled-themes();

  @each $theme-name in $enabled-themes {
    @include dy-lazy-process-context($theme-name);

    /*
      :host can be prefixed
      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441

      We have to use :host instead of :host-context($theme), to be able to prefix theme class
      with something defined inside of @content, by prefixing &.
      For example this scss code:
        .dy-theme-default {
          .some-selector & {
            ...
          }
        }
      Will result in next css:
        .some-selector .dy-theme-default {
          ...
        }

      It doesn't work with :host-context because angular splitting it in two selectors and removes
      prefix in one of the selectors.
    */
    .dy-theme-#{$theme-name} :host {
      @content;
    }
  }
}

// Entry point
// Installs component styles based on registered themes
// TODO: we hide :host inside of it which is not obvious
@mixin dy-install-component() {
  @if ($dy-enable-css-custom-properties) {
    @include dy-install-component-with-css-props() {
      @content;
    }
  } @else {
    @include dy-install-component-with-scss-vars() {
      @content;
    }
  }
}

@mixin dy-install-global-with-css-props() {
  @content;

  @each $theme-name in dy-get-enabled-themes() {
    @include dy-install-css-properties(
      $theme-name,
      dy-get-registered-theme($theme-name)
    );
  }
}

@mixin dy-install-global-with-scss-vars() {
  @each $theme-name in dy-get-enabled-themes() {
    @include dy-pre-process-context($theme-name);

    .dy-theme-#{$theme-name} {
      @content;
    }
  }
}

// Entry point
// Installs global styles based on registered themes
@mixin dy-install() {
  @if ($dy-enable-css-custom-properties) {
    @include dy-install-global-with-css-props() {
      @content;
    }
  } @else {
    @include dy-install-global-with-scss-vars() {
      @content;
    }
  }
}
